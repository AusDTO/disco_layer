
//Eventually this should be generically defined as a view within the service information. Then it can be further customised.
//For now it just selects the nodes which are known to be the services, and outputs all the successors and decendants as attributes.
//link information will be appended to target contents - this is particularly something that should be defined in views.

fs = require('fs');
cytoscape = require('cytoscape');
path = require('path');

console.log("Loading Service File");
fs.readFile(path.join(__dirname, 'DHS11.json'), function (err,data) {
	if (err) {
		console.info("In error condition opending events file");
		console.info("__dirname: " + __dirname);
		return console.log(err);
		}
	data = JSON.parse(data);
	 
	 
	var elements = data.organisationDefinition.serviceDimensions;
	elements = elements.concat(data.organisationDefinition.serviceOrganisation)
		.concat(data.organisationDefinition.components);

	console.log("Translating Service Data For Cytoscape");
	console.log("   Nodes...");
	// restructure to meet the needs of cytoscape
	var cyElements = new Array();
	elements.forEach(function(element) {
		//	if (element.type != "CAT" ){ //}&& element.type != "CAT" ) {
		var tempElement = new Object();
		tempElement.data = element;
		//console.log(JSON.stringify(tempElement));
		cyElements.push(tempElement);
	//	}
	});
	
	console.log("   Links...");
	var links = data.organisationDefinition.links;
	// restructure to meet the needs of cytoscape
	var cyLinks = new Array();
	links.forEach(function(element) {
		var tempElement = new Object();
		tempElement.data = element;
		cyLinks.push(tempElement);
		});

	console.log("Service Data Loaded, Creating  CytoScape Graph");

	var cy = cytoscape({
		elements: { 
			nodes: cyElements, 
			edges: cyLinks
			}
			/*,
		 
		layout : {
			name : 'breadthfirst',
				directed: true
			}*/
		});


		console.log("Outputing search optimised service document");
		//TODO: Eventually loop through all services
		//TODO: Use model or field to determine the dimensions we are interested in.
		
		serviceElements = cy.$('[type = "SVC"]');
		console.log (serviceElements);
		
		serviceElements.forEach((function(ele, i, eles) {
			
			var serviceDocument = {documentType : "ServiceInformation"};
			serviceDocument.service = cy.$('#SVC_067').data();
			
			var ancestors = cy.$('#SVC_067').predecessors().nodes();
			serviceDocument.Dimension = new Array;
			ancestors.forEach(function(ele, i, eles) { 
				if (ele.isNode()) {
					
					var dijkstra = cy.elements().dijkstra(ele, directed=true);				
					var dist = dijkstra.distanceTo( cy.$('#SVC_067') );
					serviceDocument.Dimension[i] = new Object;
					serviceDocument.Dimension[i].dist = dist;	 
					serviceDocument.Dimension[i].id = ele.id();	 
					serviceDocument.Dimension[i].name = ele.data( 'name');	 
					serviceDocument.Dimension[i].desc = ele.data( 'desc');	 
					//TODO: Consider adding information from incomming link for each service - not required yet though
					
					}
				});
				

			serviceDocument.Component = new Array;

			var successors = cy.$('#SVC_067').successors().nodes();
			successors.forEach(function(ele, i, eles) { 
				if (ele.isNode()) {
					serviceDocument.Component[i] = new Object;
					serviceDocument.Component[i].id  = ele.id();
					serviceDocument.Component[i].name = ele.data( 'name');
					serviceDocument.Component[i].desc = ele.data('desc');
					//Add link information - requried for DHS atleast
					}
				});
				
			fs.writeFile(path.join(__dirname, 'SVC_067.json'), JSON.stringify(serviceDocument), null, 10);
		});
			//console.log('Service File...');
		//console.log(serviceDocument);	 


		//console.log(target.parents());
		
});


